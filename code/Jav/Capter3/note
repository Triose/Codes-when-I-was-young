声明变量：
	一、两种：
		1、primitive主数据类型
		2、对象引用
	二、primitive主数据类型：
		变量是一种容器，承装某些事物。例如杯子和整数（小杯---byte、 中杯---short、 大杯---int、 超大杯---long 。。。。游泳池---BigInt）
		类型					位数					值域
		boolean			java虚拟机决定		true | false
		char 				16bits			 0 ~ 65535
		byte				8bits			-128 ~ 127
		short				16bits			-32786~32767
		int					32bits		-2147483648 ~ 2147483647
		long				64bits			-很大 ~ +很大
		float				32bits				可变
		double				64bits				可变
	三、对象
		需要明确一点：例如： 对象的声明，创建与赋值的三个步骤
										Dog myDog = new Dog();
						  这半段是声明一个引用变量|  |这半段是创建对象
											|连接对象和引用|			
									

		没有对象变量这种东西存在。
		只有引用（Reference）到对象的变量	。
		对象引用变量保存的是存取对象的方法。
		它并不是对象的容器，而是类似只想对象的指针。或者可以说是地址。但在Java中我们不会也不该知道引用变量中实际装载的是什么，它只是用来代表单一的对象。只有Java虚拟机才知道如何使用引用来取得该对象。
		个人理解：例如Dog dog = new Dog(); dog这个东西并不是Dog这个类的对象的容器，而是对对象的引用。可以把Dog的引用变量dog想象成遥控器，然后通过按钮（.bark()）来执行工作。引用变量并不是对象本身。
		对primitive主数据类型来说，变量值就是其代表的值，而对引用变量来说，变量值是取得特定对象的表示法。（对象引用的实现由jvm执行，不要管）
		注意：无论是Dog mydog; 或者是 Cat mycat; mydog 和 mycat所占的空间都是一样的，无关其实际引用的对象大小。（内部有指针，不要管）
		标记为final的话，一旦指派给了某个对象，就不能再改变。
		引用变量能引用null。 Dog mydog = null;

		***
		Book b = new Book(); Book c = new Book(); Book d = c; (c 和 d指向的是同一段内存空间，或者说c和d引用的是同一个对象)		

		引用是存取的方式，没法被引用的对象就完蛋了，会被回收。

		**
		数组也是对象，无论承载什么。
		仔细看看数组的创建过程：
/***************************************************/
Dog [] pets;				//声明一个Dog数组变量
pets = new Dog[7];			//创建大小为7的Dog数组，并赋值给pets
pets[0] = new Dog();			//pets里每一个元素都是一个引用变量，此时并没有实际的对象让其引用，所以需要创建新的对象来赋值给数组的元素。
pets[1] = new Dog();
...
/***************************************************/





